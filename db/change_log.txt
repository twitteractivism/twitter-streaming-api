/** Changes in version 1.0 - Mar 11 2018 - by Twitter Activist https://github.com/twitteractivist* https://github.com/twitteractivism/twitter-streaming-api*/1. Pages for displaying counts and details of chosen and retrieved tweets added - tweetcount.php, showtweets.php and tweetlist.php. Latest 500 tweets by descending chronological order shown in shownewtweets.php and tweetnewlist.phpCache of tweets - When visitor visits a page, the data by page and keyword combination is cached in temporary tables in database and deleted afterwards using cronjob. When another visitor visits the same page, the tweets will be loaded from the cache tables if that page is cached.Twitter Display using lookup endpoint and Oembed endpoint fallback for tweets display - Tweets are displayed using GET statuses/lookup endpoint – 100 tweets per page in desktop and 20 tweets  per page in mobile. If rate limit in the 15 minute window exceeds, tweets are displayed using GET statuses/oembed endpoint until the 15 minute window expires.Tweet ID and User ID updation of database – When a tweet did not display when calling a twitter endpoint, Tweet IDs and User IDs which are deleted is transferred from database tables to another table along with related data (This data can be later deleted by cron)When a twitter user has modified his location or description in his twitter profile or name or profile image or url or follower counts or friends count or statuses count or last_update is modifed, user and tweets tables are updated accordingly for these fields. If a User ID is deleted, corresponding row from user table are removed.Search Keyword combination results by location, Sender Profile from API results in showtweets.php and tweetlist.php2. Admin Panel -Added admin panel (in recalladmin folder) to add, delete and modify track keyword combinations, change their status to active or inactive and to monitor running of get_tweets_keyword.php and parse_tweets_keyword.php scripts. Admin panel also has option to add outwords for chosen keyword combinations.On stopping / starting service, email is sent to specified email id and a log is written to a text file in recalladmin folder3. Search API for finding tweets for desired keyword combinations for upto one week back and if any new user is found, search his timeline for chosen keywords and insert tweets having the desired keyword combinations - searchtweetsloop.php added in db folder to search for tweets containing Active Keyword combinations (as defined in collection_words table) using GET search/tweets endpoint (result_type parameter set to recent and count parameter set to 50) . Tweet ids which are not already existing in database (tweets table) and related data are inserted in database in tweets, users, tweet_words, tweet_urls, tweet_tags, tweet_mentions tables.When a new user is found which contains the defined active Keyword combinations, GET statuses/user_timeline will be called to get tweets containing the defined active Keyword combinations (count parameter set to 100 and exclude_replies parameter set to false). Tweet ids which are not already existing in database (tweets table) and related data is inserted in database in tweets, users, tweet_words, tweet_urls, tweet_tags, tweet_mentions tables.4. Searching tweets for a desired twitter user - searchusers.php for admin panel which has input for screen name / user id to search users timelines for tweets containing active keyword combinations defined in database. Tweet ids which are not already existing in database (tweets table) and related data are inserted in database in tweets, users, tweet_words, tweet_urls, tweet_tags, tweet_mentions tables5. Storing of all errors of Rest API in error_log_folder folder (get_tweets_keyword.php errros shown in db/error_log and parse_tweets_keyword.php errors shown in db/error_log.txt)6. After setting up cron jobs, db/cron_cache_tweets logs the successful running of cronjobs and db/move-tweet-errors to move logs to db/backuptweetlogs folder and delete log files older than 90 days7. Autostart of get_tweets_keyword, parse_tweets_keyword and other monitoring processes on server reboot./** Changes in version 0.30 - Jan. 12, 2014*/1. If you are running a previous copy of this code, you need to modify the json_cache and tweets tables:   The json_cache table used a field called parsed to record the parsing status of each new tweet. This field started as 0 and was set to 1 when parsed. This field has now been removed. The parse_tweets.php script now deletes each row in the json_cache table after it has been parsed. This speeds up insertions, since the json_cache table remains very small. You can remove the parsed field from the json_cache table.    The parse_tweets.php code now flags retweets with a field called is_rt in the tweets table. You MUST add an is_rt field as a Boolean (tinyint) field in the tweets table, or else the parsing code will fail.    The entities field is no longer recorded with tweets for later use, so you can delete the    entities field from the tweets table. This will reduce the size of the tweets table, and thus speed up insertions. The entities field was used in earlier versions to linkify tweet text in the display module. This linkify code has been modified to no longer need entities to create proper links for mentions, tags, and URLs in tweets.2. The streaming API sometimes fails to deliver a proper id_str property with each tweet to record the tweet id. This is due to two causes. Deletion notices are in a different format from tweets and the id_str field is stored in a different object structure from a normal tweet. The API also has an intermittent error that causes it to drop the id_str value. Both of these issues caused warning notices that end up in the error_log.txt file. The get_tweets.php script has been changed in this version to ignore tweets with a missing or improperly formed id_str value. 3. The parse_tweets.php script now deletes rows in the json_cache table as they are being parsed. 4. The parse_tweets.php script has been modified to handle retweets in two new ways:   The entities from the original tweet are now used to extract mentions, tags, and URLs. This is a more complete set of data than the entities found in the retweeted version.    A new is_rt flag is set to 1 for a retweet, and this is stored in the tweets table.    5. The parse_tweets.php script has been modified to only record tweets that have a specific language. This is done by checking the lang property in each tweet. The distribution code checks for a language value of 'en' for English, but you can change this to any language. 6. One cause of confusion in earlier versions was the need to fill in paths to the code directories in 140dev_config.php. These path constants have been removed from this file, and the streaming API database code has been modified to no longer need them. The tweet display plugin still needs the URL for Ajax calls, and this should now be entered in the twitter_display_config.php file found in the code for that plugin. 